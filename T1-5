#include <stdio.h>
#include <stdlib.h>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
#define M 4
#define N 5

int findCommon(int mat[M][N]);

int main(int argc, char** argv) {
	int task_num;
	printf("Enter the task number: \n");
	scanf("%d", &task_num);
    
	if(task_num==1)
	{
		int i, j, lines, columns, *intMatrix;
  

  		printf("Type the matrix lines:\t");
  		scanf("%d", &lines);
  		printf("Type the matrix columns:\t");
  		scanf("%d", &columns);

  		intMatrix = (int *)malloc(lines * columns * sizeof(int)); 

  		for (i = 0; i < lines; i++)
  		{
    	    for (j = 0; j < columns; j++)
    	    {
    	        printf("Type a number 1 or 0 for <line: %d, column: %d>\t", i+1, j+1);
    	        scanf("%d", &intMatrix[i*columns + j]);
    	    }
  		}
  		for (i = 0; i < lines; i++)
 		{
  			for (j = 0; j < columns; j++)
  			{
  				printf("%d ", intMatrix[i*columns+j]);
			}
  		}
  		int count = 0;
  		for (i = 0; i < lines; i++)
        {
            for (j = 0; j < columns; j++)
            {
         	    if (intMatrix[i*columns + j]==0)
			    {
		    		count++;
		    		break;
				}		     
    		}
  		}
  		printf("\nThe number of lines with at least one zero element is %d", count);
	}
	else if (task_num==2)
	{
		int i, j, lines, columns, *intMatrix;
  

  		printf("Type the matrix lines:\t");
  		scanf("%d", &lines);
  		printf("Type the matrix columns:\t");
  		scanf("%d", &columns);

  		intMatrix = (int *)malloc(lines * columns * sizeof(int)); 

  		for (i = 0; i < lines; i++)
  		{
     	    for (j = 0; j < columns; j++)
      		{
        		printf("Type a number for <line: %d, column: %d>\t", i+1, j+1);
        		scanf("%d", &intMatrix[i*columns + j]);
      		}
  		}
  		for (i = 0; i < lines; i++)
  		{
  			for (j = 0; j < columns; j++)
  			{
  				printf("%d ", intMatrix[i*columns+j]);
			}
  		}
  		for (i = 0; i < lines; i++)
  		{
    		int x = 0;
	        for (j = 0; j < columns-1; j++)
      		{
       		    if (intMatrix[i*columns + j]>intMatrix[i*columns + (j + 1)])
            		x++;
      		}
      		if (x==columns-1)
        		printf("\nIn line %d there is monotonic decreasing sequence.", i+1);
      		else 
        		printf ("\nIn line %d there is no monotonic decreasing sequence.", i+1);
  		}
	}
	else if (task_num==3)
	{
		int i, j, k, lines, columns, *intMatrix;
  

  		printf("Type the matrix lines:\t");
  		scanf("%d", &lines);
  		printf("Type the matrix columns:\t");
  		scanf("%d", &columns);

  		intMatrix = (int *)malloc(lines * columns * sizeof(int)); 

  		for (i = 0; i < lines; i++)
  		{
     		for (j = 0; j < columns; j++)
    		{
      			printf("Type a number for <line: %d, column: %d>\t", i+1, j+1);
      			scanf("%d", &intMatrix[i*columns + j]);
     		}
  		}
  		for (i = 0; i < lines; i++)
  		{
  			for (j = 0; j < columns; j++)
  			{
  				printf("%d ", intMatrix[i*columns+j]);
			}
		}
  		for (i = 0; i < lines; i++)
  		{
     		int count = 0;
			for (j = 0; j < columns; j++)
     		{
      			int c = 0;
				for (k=2; k<intMatrix[i*columns + j]; k++)
				{
		 		    if (intMatrix[i*columns + j]%k==0)
		  			{
		    			c = 1;
		    			break;
					}
				}
       			if (c==0)
    		    {
        			count++;
				}        
      		}
      		printf("\nThe number of prime numbers in line %d is %d", i+1, count);
  		}
	}
	else if (task_num==4)
	{
		int i, j, lines, columns, *intMatrix;
  

 		printf("Type the matrix lines:\t");
        scanf("%d", &lines);
  		printf("Type the matrix columns:\t");
  		scanf("%d", &columns);

  		intMatrix = (int *)malloc(lines * columns * sizeof(int)); 

  		for (i = 0; i < lines; i++)
  		{
     		for (j = 0; j < columns; j++)
     		{
     		    printf("Type a number for <line: %d, column: %d>\t", i+1, j+1);
        		scanf("%d", &intMatrix[i*columns + j]);
     		}
  		}
  		for (i = 0; i < lines; i++)
  		{
  			for (j = 0; j < columns; j++)
  			{
  				printf("%d ", intMatrix[i*columns+j]);
			}
  		}
  		for (i = 0; i < lines; i++)
  		{
     		int unique = 1;
	 		for (j = 0; j < columns-1; j++)
    		{
      			if (intMatrix[i*columns + j]==intMatrix[i*columns + (j + 1)])
          			continue;
        		else
        		    unique++;
      		}
      		printf("\nThe number of unique elements in line %d are %d", i+1, unique);
  		}
	}
	else if (task_num==5)
	{
		int mat[M][N] = { {1, 2, 3, 4, 5},
                    {2, 4, 5, 8, 10},
                    {3, 5, 7, 9, 11},
                    {1, 3, 5, 7, 9},
                  };
  		int result = findCommon(mat);
  		if (result == -1)
    		printf("No common element");
  		else
    		printf("Common element is %d", result);
	}
	return 0;
}

int findCommon(int mat[M][N])
{
    int column[M];
    int min_row;  
 
    int i;
    for (i=0; i<M; i++)
        column[i] = N-1;
 
    min_row = 0; 
    while (column[min_row] >= 0)
    {
       for (i=0; i<M; i++)
       {
          if (mat[i][column[i]] < mat[min_row][column[min_row]] )
             min_row = i;
       }
 
       int eq_count = 0;
       for (i=0; i<M; i++)
       {
          if (mat[i][column[i]] > mat[min_row][column[min_row]])
          {
             if (column[i] == 0)
                return -1;
 
             column[i] -= 1; 
          }
          else
             eq_count++;
       }
 
        if (eq_count == M)
          return mat[min_row][column[min_row]];
    }
    return -1;
}
